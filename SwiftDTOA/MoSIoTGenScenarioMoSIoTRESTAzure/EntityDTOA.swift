//
// EntityDTOA.swift
// 
// Code autogenerated. Do not modify this file.
//

import Foundation
import SwiftyJSON
		
class EntityDTOA : DTOA
{
	// MARK: - Properties

	var id: Int?;
	
	
	/* Rol: Entity o--> Association */
	var originAssociations: [AssociationDTOA]?;

	/* Rol: Entity o--> Association */
	var targetAssociations: [AssociationDTOA]?;

	/* Rol: Entity o--> EntityAttributes */
	var attributes: [EntityAttributesDTOA]?;

	/* Rol: Entity o--> EntityOperation */
	var operations: [EntityOperationDTOA]?;

	
	
	
	
	// MARK: - Constructor
	
	init ()
	{
		// Empty constructor
	}
	
	
	
	// MARK: - JSON <-> DTOA
	
	required init (fromJSONObject json: JSON)
	{
		self.id = json["Id"].object as? Int
		
	
		
		if (json["OriginAssociations"] != JSON.null)
		{
			self.originAssociations = AssociationDTOA(fromJSONObject: json["OriginAssociations"]);
		}

		if (json["TargetAssociations"] != JSON.null)
		{
			self.targetAssociations = AssociationDTOA(fromJSONObject: json["TargetAssociations"]);
		}

		if (json["Attributes"] != JSON.null)
		{
			self.attributes = [];
			for subJson in json["Attributes"].arrayValue
			{
				self.attributes!.append(EntityAttributesDTOA(fromJSONObject: subJson));
			}
		}

		if (json["Operations"] != JSON.null)
		{
			self.operations = EntityOperationDTOA(fromJSONObject: json["Operations"]);
		}

		
	}
	
	func toDictionary() -> [String : AnyObject]
	{
		var dictionary: [String : AnyObject] = [:];
		
		dictionary["Id"] = self.id;
		
	
		
		dictionary["OriginAssociations"] = self.originAssociations?.toDictionary() ?? NSNull();

		dictionary["TargetAssociations"] = self.targetAssociations?.toDictionary() ?? NSNull();

		dictionary["Attributes"] = NSNull();
		if (self.attributes != nil)
		{
			var arrayOfDictionary: [[String : AnyObject]] = [];
			for item in self.attributes!
			{
				arrayOfDictionary.append(item.toDictionary());
			}
			
			dictionary["Attributes"] = arrayOfDictionary;
		}

		dictionary["Operations"] = self.operations?.toDictionary() ?? NSNull();

		
		
		return dictionary;
	}
}

	