//
// DeviceTemplateDTOA.swift
// 
// Code autogenerated. Do not modify this file.
//

import Foundation
import SwiftyJSON
		
class DeviceTemplateDTOA : DTOA
{
	// MARK: - Properties

	var id: Int?;
	
	var name: String?;
	var type: DeviceType?;
	var isEdge: Bool?;
	
	/* Rol: DeviceTemplate o--> Property */
	var properties: [PropertyDTOA]?;

	/* Rol: DeviceTemplate o--> Command */
	var commands: [CommandDTOA]?;

	/* Rol: DeviceTemplate o--> Telemetry */
	var telemetries: [TelemetryDTOA]?;

	
	
	
	
	// MARK: - Constructor
	
	init ()
	{
		// Empty constructor
	}
	
	
	
	// MARK: - JSON <-> DTOA
	
	required init (fromJSONObject json: JSON)
	{
		self.id = json["Id"].object as? Int
		
	
		self.name = json["Name"].object as? String;
		if let enumValue = json["Type"].object as? Int
		{
			self.type = DeviceType(rawValue: enumValue);
		}
		self.isEdge = json["IsEdge"].object as? Bool;
		
		if (json["Properties"] != JSON.null)
		{
			self.properties = PropertyDTOA(fromJSONObject: json["Properties"]);
		}

		if (json["Commands"] != JSON.null)
		{
			self.commands = CommandDTOA(fromJSONObject: json["Commands"]);
		}

		if (json["Telemetries"] != JSON.null)
		{
			self.telemetries = TelemetryDTOA(fromJSONObject: json["Telemetries"]);
		}

		
	}
	
	func toDictionary() -> [String : AnyObject]
	{
		var dictionary: [String : AnyObject] = [:];
		
		dictionary["Id"] = self.id;
		
	

	
		dictionary["Name"] = self.name;
	
	

	
		dictionary["Type"] = self.type?.rawValue;
	
	

	
		dictionary["IsEdge"] = self.isEdge;
	
	
		
		dictionary["Properties"] = self.properties?.toDictionary() ?? NSNull();

		dictionary["Commands"] = self.commands?.toDictionary() ?? NSNull();

		dictionary["Telemetries"] = self.telemetries?.toDictionary() ?? NSNull();

		
		
		return dictionary;
	}
}

	