
package MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class ComunicationDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private SeverityEvent severity;
	public SeverityEvent getSeverity () { return severity; }
	public void setSeverity (SeverityEvent severity) { this.severity = severity; }
	
	private String message;
	public String getMessage () { return message; }
	public void setMessage (String message) { this.message = message; }
	
	private java.util.Date sendDate;
	public java.util.Date getSendDate () { return sendDate; }
	public void setSendDate (java.util.Date sendDate) { this.sendDate = sendDate; }
	
	
	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public ComunicationDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Severity")))
			{
				int enumRawValue = (int) json.opt("Severity");
				this.severity = SeverityEvent.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Message")))
			{
			 
				this.message = (String) json.opt("Message");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("SendDate")))
			{
			 
			 	String stringDate = (String) json.opt("SendDate");
				this.sendDate = DateUtils.stringToDateFormat(stringDate);
			 
			}
			
			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.severity != null)
			json.put("Severity", this.severity.getRawValue());
		
		
		  if (this.message != null)
			json.put("Message", this.message);
		
		
		  if (this.sendDate != null)
			json.put("SendDate", DateUtils.dateToFormatString(this.sendDate));
		
			
			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		ComunicationDTO dto = new ComunicationDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setSeverity (this.getSeverity());

	dto.setMessage (this.getMessage());

	dto.setSendDate (this.getSendDate());

		
		
		// Roles
		
		
		return dto;
	}

	// endregion
}

	