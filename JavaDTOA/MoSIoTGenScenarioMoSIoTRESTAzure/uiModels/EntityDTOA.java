
package MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class EntityDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	
	/* Rol: Entity o--> Association */
	private ArrayList<AssociationDTOA> originAssociations;
	public ArrayList<AssociationDTOA> getOriginAssociations () { return originAssociations; }
	public void setOriginAssociations (ArrayList<AssociationDTOA> originAssociations) { this.originAssociations = originAssociations; }

	/* Rol: Entity o--> Association */
	private ArrayList<AssociationDTOA> targetAssociations;
	public ArrayList<AssociationDTOA> getTargetAssociations () { return targetAssociations; }
	public void setTargetAssociations (ArrayList<AssociationDTOA> targetAssociations) { this.targetAssociations = targetAssociations; }

	/* Rol: Entity o--> EntityAttributes */
	private ArrayList<EntityAttributesDTOA> attributes;
	public ArrayList<EntityAttributesDTOA> getAttributes () { return attributes; }
	public void setAttributes (ArrayList<EntityAttributesDTOA> attributes) { this.attributes = attributes; }

	/* Rol: Entity o--> EntityOperation */
	private ArrayList<EntityOperationDTOA> operations;
	public ArrayList<EntityOperationDTOA> getOperations () { return operations; }
	public void setOperations (ArrayList<EntityOperationDTOA> operations) { this.operations = operations; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public EntityDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			
			

			JSONObject jsonOriginAssociations = json.optJSONObject("OriginAssociations");
			if (jsonOriginAssociations != null)
			{
				AssociationDTOA tmp = new AssociationDTOA();
				tmp.setFromJSON(jsonOriginAssociations);
				this.originAssociations = tmp;
			}


			JSONObject jsonTargetAssociations = json.optJSONObject("TargetAssociations");
			if (jsonTargetAssociations != null)
			{
				AssociationDTOA tmp = new AssociationDTOA();
				tmp.setFromJSON(jsonTargetAssociations);
				this.targetAssociations = tmp;
			}


			JSONArray arrayAttributes = json.optJSONArray("Attributes");
			if (arrayAttributes != null)
			{
				this.attributes = new ArrayList<EntityAttributesDTOA>();
				for (int i = 0; i < arrayAttributes.length(); ++i)
				{
					JSONObject subJson = (JSONObject) arrayAttributes.opt(i);
					EntityAttributesDTOA tmp = new EntityAttributesDTOA();
					tmp.setFromJSON(subJson);
					this.attributes.add(tmp);
				}
			}


			JSONObject jsonOperations = json.optJSONObject("Operations");
			if (jsonOperations != null)
			{
				EntityOperationDTOA tmp = new EntityOperationDTOA();
				tmp.setFromJSON(jsonOperations);
				this.operations = tmp;
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
			

			if (this.originAssociations != null)
			{
				json.put("OriginAssociations", this.originAssociations.toJSON());
			}


			if (this.targetAssociations != null)
			{
				json.put("TargetAssociations", this.targetAssociations.toJSON());
			}


			if (this.attributes != null)
			{
				JSONArray jsonArray = new JSONArray();
				for (int i = 0; i < this.attributes.size(); ++i)
				{
					jsonArray.put(this.attributes.get(i).toJSON());
				}
				json.put("Attributes", jsonArray);
			}


			if (this.operations != null)
			{
				json.put("Operations", this.operations.toJSON());
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		EntityDTO dto = new EntityDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
		
		
		// Roles
					// TODO: from DTOA [ OriginAssociations ] (dataType : ArrayList<AssociationDTOA>) to DTO [ OriginAssociation ]
					// TODO: from DTOA [ TargetAssociations ] (dataType : ArrayList<AssociationDTOA>) to DTO [ TargetAssociation ]
					// TODO: from DTOA [ Attributes ] (dataType : ArrayList<EntityAttributesDTOA>) to DTO [ Attributes ]
					// TODO: from DTOA [ Operations ] (dataType : ArrayList<EntityOperationDTOA>) to DTO [ Operations ]
		
		
		return dto;
	}

	// endregion
}

	