
package MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenScenarioMoSIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class DeviceTemplateDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private String name;
	public String getName () { return name; }
	public void setName (String name) { this.name = name; }
	
	private DeviceType type;
	public DeviceType getType () { return type; }
	public void setType (DeviceType type) { this.type = type; }
	
	private Boolean isEdge;
	public Boolean getIsEdge () { return isEdge; }
	public void setIsEdge (Boolean isEdge) { this.isEdge = isEdge; }
	
	
	/* Rol: DeviceTemplate o--> Command */
	private ArrayList<CommandDTOA> commands;
	public ArrayList<CommandDTOA> getCommands () { return commands; }
	public void setCommands (ArrayList<CommandDTOA> commands) { this.commands = commands; }

	/* Rol: DeviceTemplate o--> Property */
	private ArrayList<PropertyDTOA> properties;
	public ArrayList<PropertyDTOA> getProperties () { return properties; }
	public void setProperties (ArrayList<PropertyDTOA> properties) { this.properties = properties; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public DeviceTemplateDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Name")))
			{
			 
				this.name = (String) json.opt("Name");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Type")))
			{
				int enumRawValue = (int) json.opt("Type");
				this.type = DeviceType.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("IsEdge")))
			{
			 
				this.isEdge = (Boolean) json.opt("IsEdge");
			 
			}
			

			JSONObject jsonCommands = json.optJSONObject("Commands");
			if (jsonCommands != null)
			{
				CommandDTOA tmp = new CommandDTOA();
				tmp.setFromJSON(jsonCommands);
				this.commands = tmp;
			}


			JSONObject jsonProperties = json.optJSONObject("Properties");
			if (jsonProperties != null)
			{
				PropertyDTOA tmp = new PropertyDTOA();
				tmp.setFromJSON(jsonProperties);
				this.properties = tmp;
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.name != null)
			json.put("Name", this.name);
		
		
		  if (this.type != null)
			json.put("Type", this.type.getRawValue());
		
		
		  if (this.isEdge != null)
			json.put("IsEdge", this.isEdge);
		
			

			if (this.commands != null)
			{
				json.put("Commands", this.commands.toJSON());
			}


			if (this.properties != null)
			{
				json.put("Properties", this.properties.toJSON());
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		DeviceTemplateDTO dto = new DeviceTemplateDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setName (this.getName());

	dto.setType (this.getType());

	dto.setIsEdge (this.getIsEdge());

		
		
		// Roles
					// TODO: from DTOA [ Commands ] (dataType : ArrayList<CommandDTOA>) to DTO [ Command ]
					// TODO: from DTOA [ Properties ] (dataType : ArrayList<PropertyDTOA>) to DTO [ Property ]
		
		
		return dto;
	}

	// endregion
}

	