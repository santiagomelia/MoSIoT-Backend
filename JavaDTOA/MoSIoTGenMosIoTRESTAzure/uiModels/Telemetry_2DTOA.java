
package MoSIoTGenMosIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class Telemetry_2DTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private String name;
	public String getName () { return name; }
	public void setName (String name) { this.name = name; }
	
	private TelemetryType type;
	public TelemetryType getType () { return type; }
	public void setType (TelemetryType type) { this.type = type; }
	
	private Double frecuency;
	public Double getFrecuency () { return frecuency; }
	public void setFrecuency (Double frecuency) { this.frecuency = frecuency; }
	
	private DataType schema;
	public DataType getSchema () { return schema; }
	public void setSchema (DataType schema) { this.schema = schema; }
	
	private TypeUnit unit;
	public TypeUnit getUnit () { return unit; }
	public void setUnit (TypeUnit unit) { this.unit = unit; }
	
	
	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public Telemetry_2DTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Name")))
			{
			 
				this.name = (String) json.opt("Name");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Type")))
			{
				int enumRawValue = (int) json.opt("Type");
				this.type = TelemetryType.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Frecuency")))
			{
			 
			 	String stringDouble = String.valueOf(json.opt("Frecuency"));
 				this.frecuency = Double.parseDouble(stringDouble);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Schema")))
			{
				int enumRawValue = (int) json.opt("Schema");
				this.schema = DataType.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Unit")))
			{
				int enumRawValue = (int) json.opt("Unit");
				this.unit = TypeUnit.fromRawValue(enumRawValue);
			 
			}
			
			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.name != null)
			json.put("Name", this.name);
		
		
		  if (this.type != null)
			json.put("Type", this.type.getRawValue());
		
		
		  if (this.frecuency != null)
			json.put("Frecuency", this.frecuency);
		
		
		  if (this.schema != null)
			json.put("Schema", this.schema.getRawValue());
		
		
		  if (this.unit != null)
			json.put("Unit", this.unit.getRawValue());
		
			
			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		TelemetryDTO dto = new TelemetryDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setName (this.getName());

	dto.setType (this.getType());

	dto.setFrecuency (this.getFrecuency());

	dto.setSchema (this.getSchema());

	dto.setUnit (this.getUnit());

		
		
		// Roles
		
		
		return dto;
	}

	// endregion
}

	