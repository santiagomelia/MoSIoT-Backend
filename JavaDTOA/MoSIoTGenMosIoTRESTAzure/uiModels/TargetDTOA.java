
package MoSIoTGenMosIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class TargetDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private String desiredValue;
	public String getDesiredValue () { return desiredValue; }
	public void setDesiredValue (String desiredValue) { this.desiredValue = desiredValue; }
	
	private String description;
	public String getDescription () { return description; }
	public void setDescription (String description) { this.description = description; }
	
	private java.util.Date dueDate;
	public java.util.Date getDueDate () { return dueDate; }
	public void setDueDate (java.util.Date dueDate) { this.dueDate = dueDate; }
	
	
	/* Rol: Target o--> Measure */
	private MeasureDTOA measure;
	public MeasureDTOA getMeasure () { return measure; }
	public void setMeasure (MeasureDTOA measure) { this.measure = measure; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public TargetDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("DesiredValue")))
			{
			 
				this.desiredValue = (String) json.opt("DesiredValue");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Description")))
			{
			 
				this.description = (String) json.opt("Description");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("DueDate")))
			{
			 
			 	String stringDate = (String) json.opt("DueDate");
				this.dueDate = DateUtils.stringToDateFormat(stringDate);
			 
			}
			

			JSONObject jsonMeasure = json.optJSONObject("Measure");
			if (jsonMeasure != null)
			{
				MeasureDTOA tmp = new MeasureDTOA();
				tmp.setFromJSON(jsonMeasure);
				this.measure = tmp;
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.desiredValue != null)
			json.put("DesiredValue", this.desiredValue);
		
		
		  if (this.description != null)
			json.put("Description", this.description);
		
		
		  if (this.dueDate != null)
			json.put("DueDate", DateUtils.dateToFormatString(this.dueDate));
		
			

			if (this.measure != null)
			{
				json.put("Measure", this.measure.toJSON());
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		TargetDTO dto = new TargetDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setDesiredValue (this.getDesiredValue());

	dto.setDescription (this.getDescription());

	dto.setDueDate (this.getDueDate());

		
		
		// Roles
					// TODO: from DTOA [ Measure ] (dataType : MeasureDTOA) to DTO [ Measure ]
		
		
		return dto;
	}

	// endregion
}

	