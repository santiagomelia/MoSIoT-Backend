
package MoSIoTGenMosIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class TelemetryDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private Double frecuency;
	public Double getFrecuency () { return frecuency; }
	public void setFrecuency (Double frecuency) { this.frecuency = frecuency; }
	
	private DataType schema;
	public DataType getSchema () { return schema; }
	public void setSchema (DataType schema) { this.schema = schema; }
	
	private TypeUnit unit;
	public TypeUnit getUnit () { return unit; }
	public void setUnit (TypeUnit unit) { this.unit = unit; }
	
	private String name;
	public String getName () { return name; }
	public void setName (String name) { this.name = name; }
	
	private TelemetryType type;
	public TelemetryType getType () { return type; }
	public void setType (TelemetryType type) { this.type = type; }
	
	
	/* Rol: Telemetry o--> SensorTelemetry */
	private SensorTelemetryDTOA sensor;
	public SensorTelemetryDTOA getSensor () { return sensor; }
	public void setSensor (SensorTelemetryDTOA sensor) { this.sensor = sensor; }

	/* Rol: Telemetry o--> StateTelemetry */
	private StateTelemetryDTOA state;
	public StateTelemetryDTOA getState () { return state; }
	public void setState (StateTelemetryDTOA state) { this.state = state; }

	/* Rol: Telemetry o--> LocationTelemetry */
	private LocationTelemetryDTOA location;
	public LocationTelemetryDTOA getLocation () { return location; }
	public void setLocation (LocationTelemetryDTOA location) { this.location = location; }

	/* Rol: Telemetry o--> EventTelemetry */
	private EventTelemetryDTOA event_;
	public EventTelemetryDTOA getEvent_ () { return event_; }
	public void setEvent_ (EventTelemetryDTOA event_) { this.event_ = event_; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public TelemetryDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Frecuency")))
			{
			 
			 	String stringDouble = String.valueOf(json.opt("Frecuency"));
 				this.frecuency = Double.parseDouble(stringDouble);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Schema")))
			{
				int enumRawValue = (int) json.opt("Schema");
				this.schema = DataType.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Unit")))
			{
				int enumRawValue = (int) json.opt("Unit");
				this.unit = TypeUnit.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Name")))
			{
			 
				this.name = (String) json.opt("Name");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Type")))
			{
				int enumRawValue = (int) json.opt("Type");
				this.type = TelemetryType.fromRawValue(enumRawValue);
			 
			}
			

			JSONObject jsonSensor = json.optJSONObject("Sensor");
			if (jsonSensor != null)
			{
				SensorTelemetryDTOA tmp = new SensorTelemetryDTOA();
				tmp.setFromJSON(jsonSensor);
				this.sensor = tmp;
			}


			JSONObject jsonState = json.optJSONObject("State");
			if (jsonState != null)
			{
				StateTelemetryDTOA tmp = new StateTelemetryDTOA();
				tmp.setFromJSON(jsonState);
				this.state = tmp;
			}


			JSONObject jsonLocation = json.optJSONObject("Location");
			if (jsonLocation != null)
			{
				LocationTelemetryDTOA tmp = new LocationTelemetryDTOA();
				tmp.setFromJSON(jsonLocation);
				this.location = tmp;
			}


			JSONObject jsonEvent_ = json.optJSONObject("Event_");
			if (jsonEvent_ != null)
			{
				EventTelemetryDTOA tmp = new EventTelemetryDTOA();
				tmp.setFromJSON(jsonEvent_);
				this.event_ = tmp;
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.frecuency != null)
			json.put("Frecuency", this.frecuency);
		
		
		  if (this.schema != null)
			json.put("Schema", this.schema.getRawValue());
		
		
		  if (this.unit != null)
			json.put("Unit", this.unit.getRawValue());
		
		
		  if (this.name != null)
			json.put("Name", this.name);
		
		
		  if (this.type != null)
			json.put("Type", this.type.getRawValue());
		
			

			if (this.sensor != null)
			{
				json.put("Sensor", this.sensor.toJSON());
			}


			if (this.state != null)
			{
				json.put("State", this.state.toJSON());
			}


			if (this.location != null)
			{
				json.put("Location", this.location.toJSON());
			}


			if (this.event_ != null)
			{
				json.put("Event_", this.event_.toJSON());
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		TelemetryDTO dto = new TelemetryDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setFrecuency (this.getFrecuency());

	dto.setSchema (this.getSchema());

	dto.setUnit (this.getUnit());

	dto.setName (this.getName());

	dto.setType (this.getType());

		
		
		// Roles
					// TODO: from DTOA [ Sensor ] (dataType : SensorTelemetryDTOA) to DTO [ TypeTelemetry ]
					// TODO: from DTOA [ State ] (dataType : StateTelemetryDTOA) to DTO [ TypeTelemetry ]
					// TODO: from DTOA [ Location ] (dataType : LocationTelemetryDTOA) to DTO [ TypeTelemetry ]
					// TODO: from DTOA [ Event_ ] (dataType : EventTelemetryDTOA) to DTO [ TypeTelemetry ]
		
		
		return dto;
	}

	// endregion
}

	