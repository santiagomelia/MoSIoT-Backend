
package MoSIoTGenMosIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class AppointmentDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private Boolean isVirtual;
	public Boolean getIsVirtual () { return isVirtual; }
	public void setIsVirtual (Boolean isVirtual) { this.isVirtual = isVirtual; }
	
	private String description;
	public String getDescription () { return description; }
	public void setDescription (String description) { this.description = description; }
	
	private String direction;
	public String getDirection () { return direction; }
	public void setDirection (String direction) { this.direction = direction; }
	
	private String reasonCode;
	public String getReasonCode () { return reasonCode; }
	public void setReasonCode (String reasonCode) { this.reasonCode = reasonCode; }
	
	
	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public AppointmentDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("IsVirtual")))
			{
			 
				this.isVirtual = (Boolean) json.opt("IsVirtual");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Description")))
			{
			 
				this.description = (String) json.opt("Description");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Direction")))
			{
			 
				this.direction = (String) json.opt("Direction");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("ReasonCode")))
			{
			 
				this.reasonCode = (String) json.opt("ReasonCode");
			 
			}
			
			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.isVirtual != null)
			json.put("IsVirtual", this.isVirtual);
		
		
		  if (this.description != null)
			json.put("Description", this.description);
		
		
		  if (this.direction != null)
			json.put("Direction", this.direction);
		
		
		  if (this.reasonCode != null)
			json.put("ReasonCode", this.reasonCode);
		
			
			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		AppointmentDTO dto = new AppointmentDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setIsVirtual (this.getIsVirtual());

	dto.setDescription (this.getDescription());

	dto.setDirection (this.getDirection());

	dto.setReasonCode (this.getReasonCode());

		
		
		// Roles
		
		
		return dto;
	}

	// endregion
}

	