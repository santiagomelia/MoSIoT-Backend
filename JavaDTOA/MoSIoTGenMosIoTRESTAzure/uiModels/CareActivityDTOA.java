
package MoSIoTGenMosIoTRESTAzure.uiModels.DTOA;

import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.utils.*;
import MoSIoTGenMosIoTRESTAzure.uiModels.DTO.enumerations.*;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * Code autogenerated. Do not modify this file.
 */
public class CareActivityDTOA extends DTOA
{
	// region - Members, getters and setters

	private Integer id;
	public Integer getId () { return id; }
	public void setId (Integer id) { this.id = id; }

	
	private TypePeriodicity periodicity;
	public TypePeriodicity getPeriodicity () { return periodicity; }
	public void setPeriodicity (TypePeriodicity periodicity) { this.periodicity = periodicity; }
	
	private String description;
	public String getDescription () { return description; }
	public void setDescription (String description) { this.description = description; }
	
	private Integer duration;
	public Integer getDuration () { return duration; }
	public void setDuration (Integer duration) { this.duration = duration; }
	
	private String location;
	public String getLocation () { return location; }
	public void setLocation (String location) { this.location = location; }
	
	private TypeActivity typeActivity;
	public TypeActivity getTypeActivity () { return typeActivity; }
	public void setTypeActivity (TypeActivity typeActivity) { this.typeActivity = typeActivity; }
	
	private String name;
	public String getName () { return name; }
	public void setName (String name) { this.name = name; }
	
	
	/* Rol: CareActivity o--> Medication */
	private MedicationDTOA medications;
	public MedicationDTOA getMedications () { return medications; }
	public void setMedications (MedicationDTOA medications) { this.medications = medications; }

	/* Rol: CareActivity o--> NutritionOrder */
	private NutritionOrderDTOA nutritionOrders;
	public NutritionOrderDTOA getNutritionOrders () { return nutritionOrders; }
	public void setNutritionOrders (NutritionOrderDTOA nutritionOrders) { this.nutritionOrders = nutritionOrders; }

	/* Rol: CareActivity o--> Appointment */
	private AppointmentDTOA appointments;
	public AppointmentDTOA getAppointments () { return appointments; }
	public void setAppointments (AppointmentDTOA appointments) { this.appointments = appointments; }

	
	
	// endregion
	
	
	
	// region - Constructor and JSON <-> DTOA <-> DTO
	
	public CareActivityDTOA ()
	{
		// Empty constructor
	}
	
	@Override
	public void setFromJSON (JSONObject json)
	{
		try
		{
			if (!JSONObject.NULL.equals(json.opt("Id")))
			{
				this.id = (Integer) json.opt("Id");
			}
			

			if (!JSONObject.NULL.equals(json.opt("Periodicity")))
			{
				int enumRawValue = (int) json.opt("Periodicity");
				this.periodicity = TypePeriodicity.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Description")))
			{
			 
				this.description = (String) json.opt("Description");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Duration")))
			{
			 
				this.duration = (Integer) json.opt("Duration");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Location")))
			{
			 
				this.location = (String) json.opt("Location");
			 
			}

			if (!JSONObject.NULL.equals(json.opt("TypeActivity")))
			{
				int enumRawValue = (int) json.opt("TypeActivity");
				this.typeActivity = TypeActivity.fromRawValue(enumRawValue);
			 
			}

			if (!JSONObject.NULL.equals(json.opt("Name")))
			{
			 
				this.name = (String) json.opt("Name");
			 
			}
			

			JSONObject jsonMedications = json.optJSONObject("Medications");
			if (jsonMedications != null)
			{
				MedicationDTOA tmp = new MedicationDTOA();
				tmp.setFromJSON(jsonMedications);
				this.medications = tmp;
			}


			JSONObject jsonNutritionOrders = json.optJSONObject("NutritionOrders");
			if (jsonNutritionOrders != null)
			{
				NutritionOrderDTOA tmp = new NutritionOrderDTOA();
				tmp.setFromJSON(jsonNutritionOrders);
				this.nutritionOrders = tmp;
			}


			JSONObject jsonAppointments = json.optJSONObject("Appointments");
			if (jsonAppointments != null)
			{
				AppointmentDTOA tmp = new AppointmentDTOA();
				tmp.setFromJSON(jsonAppointments);
				this.appointments = tmp;
			}

			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public JSONObject toJSON ()
	{
		JSONObject json = new JSONObject();
		
		try
		{
			if (this.id != null){
				json.put("Id", this.id);
			}
			
		
		  if (this.periodicity != null)
			json.put("Periodicity", this.periodicity.getRawValue());
		
		
		  if (this.description != null)
			json.put("Description", this.description);
		
		
		  if (this.duration != null)
			json.put("Duration", this.duration.intValue());
		
		
		  if (this.location != null)
			json.put("Location", this.location);
		
		
		  if (this.typeActivity != null)
			json.put("TypeActivity", this.typeActivity.getRawValue());
		
		
		  if (this.name != null)
			json.put("Name", this.name);
		
			

			if (this.medications != null)
			{
				json.put("Medications", this.medications.toJSON());
			}


			if (this.nutritionOrders != null)
			{
				json.put("NutritionOrders", this.nutritionOrders.toJSON());
			}


			if (this.appointments != null)
			{
				json.put("Appointments", this.appointments.toJSON());
			}

			
		}
		catch (JSONException e)
		{
			e.printStackTrace();
		}
		
		return json;
	}
	
	@Override 
	public IDTO toDTO ()
	{
		CareActivityDTO dto = new CareActivityDTO ();
		
		// Attributes
		
	dto.setId (this.getId());

		
	dto.setPeriodicity (this.getPeriodicity());

	dto.setDescription (this.getDescription());

	dto.setDuration (this.getDuration());

	dto.setLocation (this.getLocation());

	dto.setTypeActivity (this.getTypeActivity());

	dto.setName (this.getName());

		
		
		// Roles
					// TODO: from DTOA [ Medications ] (dataType : MedicationDTOA) to DTO [ Medication ]
					// TODO: from DTOA [ NutritionOrders ] (dataType : NutritionOrderDTOA) to DTO [ NutritionOrder ]
					// TODO: from DTOA [ Appointments ] (dataType : AppointmentDTOA) to DTO [ Appointment ]
		
		
		return dto;
	}

	// endregion
}

	